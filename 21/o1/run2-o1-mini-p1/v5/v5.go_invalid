package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"
	"time"
)

// Position представляет координаты на клавиатуре
type Position struct {
	x, y int
}

// Keypad представляет раскладку клавиатуры
type Keypad struct {
	layout map[string]Position
	keys   map[Position]string
}

// NewDirectionalKeypad создает направляющую клавиатуру
func NewDirectionalKeypad() *Keypad {
	layout := map[string]Position{
		"^": {1, 0},
		"A": {2, 0},
		"<": {0, 1},
		"v": {1, 1},
		">": {2, 1},
	}
	keys := make(map[Position]string)
	for k, v := range layout {
		keys[v] = k
	}
	return &Keypad{layout: layout, keys: keys}
}

// NewNumericKeypad создает цифровую клавиатуру
func NewNumericKeypad() *Keypad {
	layout := map[string]Position{
		"7": {0, 0}, "8": {1, 0}, "9": {2, 0},
		"4": {0, 1}, "5": {1, 1}, "6": {2, 1},
		"1": {0, 2}, "2": {1, 2}, "3": {2, 2},
		"0": {1, 3}, "A": {2, 3},
	}
	keys := make(map[Position]string)
	for k, v := range layout {
		keys[v] = k
	}
	return &Keypad{layout: layout, keys: keys}
}

// State представляет состояние в BFS
type State struct {
	pos     Position
	index   int
	presses int
}

// Queue представляет очередь для BFS
type Queue []State

// Enqueue добавляет элемент в очередь
func (q *Queue) Enqueue(s State) {
	*q = append(*q, s)
}

// Dequeue удаляет и возвращает первый элемент из очереди
func (q *Queue) Dequeue() State {
	s := (*q)[0]
	*q = (*q)[1:]
	return s
}

// isEmpty проверяет, пуста ли очередь
func (q *Queue) isEmpty() bool {
	return len(*q) == 0
}

func main() {
	startTotal := time.Now()
	if len(os.Args) < 2 {
		fmt.Println("Please provide the input file as an argument.")
		return
	}
	filePath := os.Args[1]
	file, err := os.Open(filePath)
	if err != nil {
		fmt.Println("Error opening file:", err)
		return
	}
	defer file.Close()

	// Инициализация клавиатур
	yourKeypad := NewDirectionalKeypad()
	robot1Keypad := NewDirectionalKeypad()
	robot2Keypad := NewDirectionalKeypad()
	numericKeypad := NewNumericKeypad()

	// Чтение кодов из файла
	scanner := bufio.NewScanner(file)
	var codes []string
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		if line != "" {
			codes = append(codes, line)
		}
	}
	if err := scanner.Err(); err != nil {
		fmt.Println("Error reading file:", err)
		return
	}
	elapsedTotal := time.Since(startTotal)
	fmt.Printf("Input parsed in %v\n", elapsedTotal)

	totalComplexity := 0

	// Кеширование результатов для ускорения
	cache := make(map[string]int)

	for _, code := range codes {
		start := time.Now()
		if _, exists := cache[code]; !exists {
			sequenceLength := computeSequenceLength(code, yourKeypad, robot1Keypad, robot2Keypad, numericKeypad)
			cache[code] = sequenceLength
		}
		sequenceLength := cache[code]
		numericValue := getNumericValue(code)
		complexity := sequenceLength * numericValue
		totalComplexity += complexity
		elapsed := time.Since(start)
		fmt.Printf("Code: %s, Sequence Length: %d, Numeric Value: %d, Complexity: %d, Time: %v\n",
			code, sequenceLength, numericValue, complexity, elapsed)
	}

	fmt.Printf("Total Complexity: %d\n", totalComplexity)
}

// computeSequenceLength вычисляет минимальную длину последовательности нажатий
// с учетом всех уровней роботов
func computeSequenceLength(code string, yourKeypad, robot1Keypad, robot2Keypad, numericKeypad *Keypad) int {
	targetSequence := strings.ToUpper(code)
	codeRunes := []rune(targetSequence)
	codeLength := len(codeRunes)

	// Инициализация BFS для вашей клавиатуры
	startPosYour := yourKeypad.layout["A"]
	initialStateYour := State{pos: startPosYour, index: 0, presses: 0}
	queueYour := &Queue{}
	queueYour.Enqueue(initialStateYour)

	// Посещенные состояния для вашей клавиатуры
	visitedYour := make(map[string]bool)
	visitedYour[stateKey(initialStateYour)] = true

	// Ключевые позиции для всех роботов
	robots := []*Keypad{robot1Keypad, robot2Keypad, numericKeypad}

	for !queueYour.isEmpty() {
		currentStateYour := queueYour.Dequeue()

		// Если весь код введен
		if currentStateYour.index == codeLength {
			return currentStateYour.presses
		}

		// Возможные движения: ^, v, <, >
		for key := range yourKeypad.layout {
			if key == "A" {
				continue // 'A' обрабатывается отдельно
			}
			newX := currentStateYour.pos.x
			newY := currentStateYour.pos.y

			switch key {
			case "^":
				newY--
			case "v":
				newY++
			case "<":
				newX--
			case ">":
				newX++
			}

			// Проверка наличия кнопки
			newPos, exists := numericKeypad.keys[Position{newX, newY}]
			if !exists {
				continue
			}

			// Создание нового состояния
			newPosition := Position{newX, newY}
			newPresses := currentStateYour.presses + 1 // Нажатие направления
			newState := State{pos: newPosition, index: currentStateYour.index, presses: newPresses}
			keyState := stateKey(newState)
			if !visitedYour[keyState] {
				visitedYour[keyState] = true
				queueYour.Enqueue(newState)
			}
		}

		// Нажатие 'A' если на правильной позиции
		currentButton := getKeyAt(currentStateYour.pos, yourKeypad)
		if currentButton == string(codeRunes[currentStateYour.index]) {
			newPresses := currentStateYour.presses + 1 // Нажатие 'A'
			newState := State{pos: currentStateYour.pos, index: currentStateYour.index + 1, presses: newPresses}
			keyState := stateKey(newState)
			if !visitedYour[keyState] {
				visitedYour[keyState] = true
				queueYour.Enqueue(newState)
			}
		}
	}

	// Если не удалось найти последовательность
	return -1
}

// stateKey генерирует уникальный ключ для состояния
func stateKey(state State) string {
	return fmt.Sprintf("%d,%d,%d", state.pos.x, state.pos.y, state.index)
}

// getKeyAt возвращает ключ по позиции
func getKeyAt(pos Position, keypad *Keypad) string {
	if key, exists := keypad.keys[pos]; exists {
		return key
	}
	return ""
}

// getNumericValue извлекает числовое значение из кода
func getNumericValue(code string) int {
	num := 0
	for _, char := range code {
		if char >= '0' && char <= '9' {
			num = num*10 + int(char-'0')
		}
	}
	return num
}
