package main

import (
	"bufio"
	"fmt"
	"os"
	"strings"
	"time"
)

// Position представляет координаты на клавиатуре
type Position struct {
	x, y int
}

// Keypad представляет раскладку клавиатуры
type Keypad struct {
	layout map[string]Position
	keys   map[Position]string
}

// NewDirectionalKeypad создает направляющую клавиатуру
func NewDirectionalKeypad() *Keypad {
	layout := map[string]Position{
		"^": {1, 0},
		"A": {2, 0},
		"<": {0, 1},
		"v": {1, 1},
		">": {2, 1},
	}
	keys := make(map[Position]string)
	for k, v := range layout {
		keys[v] = k
	}
	return &Keypad{layout: layout, keys: keys}
}

// NewNumericKeypad создает цифровую клавиатуру
func NewNumericKeypad() *Keypad {
	layout := map[string]Position{
		"7": {0, 0}, "8": {1, 0}, "9": {2, 0},
		"4": {0, 1}, "5": {1, 1}, "6": {2, 1},
		"1": {0, 2}, "2": {1, 2}, "3": {2, 2},
		"0": {1, 3}, "A": {2, 3},
	}
	keys := make(map[Position]string)
	for k, v := range layout {
		keys[v] = k
	}
	return &Keypad{layout: layout, keys: keys}
}

// State представляет состояние в BFS
type State struct {
	pos     Position
	index   int
	presses int
}

// Queue представляет очередь для BFS
type Queue []State

// Enqueue добавляет элемент в очередь
func (q *Queue) Enqueue(s State) {
	*q = append(*q, s)
}

// Dequeue удаляет и возвращает первый элемент из очереди
func (q *Queue) Dequeue() State {
	s := (*q)[0]
	*q = (*q)[1:]
	return s
}

// isEmpty проверяет, пуста ли очередь
func (q *Queue) isEmpty() bool {
	return len(*q) == 0
}

func main() {
	startTotal := time.Now()
	if len(os.Args) < 2 {
		fmt.Println("Please provide the input file as an argument.")
		return
	}
	filePath := os.Args[1]
	file, err := os.Open(filePath)
	if err != nil {
		fmt.Println("Error opening file:", err)
		return
	}
	defer file.Close()

	// Инициализация клавиатур
	yourKeypad := NewDirectionalKeypad()
	robot1Keypad := NewDirectionalKeypad()
	robot2Keypad := NewDirectionalKeypad()
	numericKeypad := NewNumericKeypad()

	// Чтение кодов из файла
	scanner := bufio.NewScanner(file)
	var codes []string
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		if line != "" {
			codes = append(codes, line)
		}
	}
	if err := scanner.Err(); err != nil {
		fmt.Println("Error reading file:", err)
		return
	}
	elapsedTotal := time.Since(startTotal)
	fmt.Printf("Input parsed in %v\n", elapsedTotal)

	totalComplexity := 0

	// Кеширование результатов для ускорения
	cache := make(map[string]int)

	for _, code := range codes {
		start := time.Now()
		if _, exists := cache[code]; !exists {
			sequenceLength := computeSequenceLength(code, yourKeypad, robot1Keypad, robot2Keypad, numericKeypad)
			cache[code] = sequenceLength
		}
		sequenceLength := cache[code]
		numericValue := getNumericValue(code)
		complexity := sequenceLength * numericValue
		totalComplexity += complexity
		elapsed := time.Since(start)
		fmt.Printf("Code: %s, Sequence Length: %d, Numeric Value: %d, Complexity: %d, Time: %v\n",
			code, sequenceLength, numericValue, complexity, elapsed)
	}

	fmt.Printf("Total Complexity: %d\n", totalComplexity)
}

// computeSequenceLength вычисляет минимальную длину последовательности нажатий
// с учетом всех уровней роботов
func computeSequenceLength(code string, yourKeypad, robot1Keypad, robot2Keypad, numericKeypad *Keypad) int {
	targetSequence := strings.ToUpper(code)
	codeRunes := []rune(targetSequence)
	codeLength := len(codeRunes)

	// Инициализация BFS для вашего уровня
	startPosYour := yourKeypad.layout["A"]
	initialStateYour := State{pos: startPosYour, index: 0, presses: 0}
	queueYour := &Queue{}
	queueYour.Enqueue(initialStateYour)

	// Посещенные состояния для вашего уровня
	visitedYour := make(map[string]bool)
	visitedYour[stateKey(initialStateYour)] = true

	// Инициализация BFS для Робота 1
	startPosRobot1 := robot1Keypad.layout["A"]
	initialStateRobot1 := State{pos: startPosRobot1, index: 0, presses: 0}
	queueRobot1 := &Queue{}
	queueRobot1.Enqueue(initialStateRobot1)

	// Посещенные состояния для Робота 1
	visitedRobot1 := make(map[string]bool)
	visitedRobot1[stateKey(initialStateRobot1)] = true

	// Инициализация BFS для Робота 2
	startPosRobot2 := robot2Keypad.layout["A"]
	initialStateRobot2 := State{pos: startPosRobot2, index: 0, presses: 0}
	queueRobot2 := &Queue{}
	queueRobot2.Enqueue(initialStateRobot2)

	// Посещенные состояния для Робота 2
	visitedRobot2 := make(map[string]bool)
	visitedRobot2[stateKey(initialStateRobot2)] = true

	// Цифровая клавиатура
	numericStartPos := numericKeypad.layout["A"]

	// Общая длина последовательности
	totalPresses := 0

	// Для каждого символа в коде
	for i := 0; i < codeLength; i++ {
		targetChar := string(codeRunes[i])

		// Найти минимальное количество нажатий на вашем уровне для достижения целевого символа
		pressesYour := bfs(yourKeypad, yourKeypad.layout["A"], targetChar, numericKeypad)
		if pressesYour == -1 {
			fmt.Printf("Cannot type code: %s\n", code)
			return -1
		}

		// Найти минимальное количество нажатий на Роботе 1 для достижения целевого символа
		pressesRobot1 := bfs(robot1Keypad, robot1Keypad.layout["A"], targetChar, numericKeypad)
		if pressesRobot1 == -1 {
			fmt.Printf("Cannot type code: %s\n", code)
			return -1
		}

		// Найти минимальное количество нажатий на Роботе 2 для достижения целевого символа
		pressesRobot2 := bfs(robot2Keypad, robot2Keypad.layout["A"], targetChar, numericKeypad)
		if pressesRobot2 == -1 {
			fmt.Printf("Cannot type code: %s\n", code)
			return -1
		}

		// Общее количество нажатий для этого символа
		totalPresses += pressesYour + pressesRobot1 + pressesRobot2 + 1 // +1 для 'A' на цифровой клавиатуре
	}

	return totalPresses
}

// bfs выполняет поиск в ширину для нахождения минимального количества нажатий
func bfs(keypad *Keypad, start Position, target string, numericKeypad *Keypad) int {
	// Инициализация BFS
	initialState := State{pos: start, index: 0, presses: 0}
	queue := &Queue{}
	queue.Enqueue(initialState)

	// Посещенные состояния
	visited := make(map[string]bool)
	visited[stateKey(initialState)] = true

	for !queue.isEmpty() {
		currentState := queue.Dequeue()

		// Если достигли целевого символа и нажали 'A'
		if currentState.index == 1 && getKeyAt(currentState.pos, keypad) == target {
			return currentState.presses + 1 // +1 для нажатия 'A'
		}

		// Попробовать все возможные направления
		for key, move := range keypad.layout {
			if key == "A" {
				continue // 'A' обрабатывается отдельно
			}
			newX := currentState.pos.x
			newY := currentState.pos.y

			switch key {
			case "^":
				newY--
			case "v":
				newY++
			case "<":
				newX--
			case ">":
				newX++
			}

			// Проверка наличия кнопки
			newPos, exists := keypad.keys[Position{newX, newY}]
			if !exists {
				continue
			}

			// Создание нового состояния
			newState := State{pos: newPos, index: currentState.index, presses: currentState.presses + 1}
			keyState := stateKey(newState)
			if !visited[keyState] {
				visited[keyState] = true
				queue.Enqueue(newState)
			}
		}

		// Нажать 'A' для активации текущей позиции
		currentButton := getKeyAt(currentState.pos, keypad)
		if currentButton == target {
			newState := State{pos: currentState.pos, index: currentState.index + 1, presses: currentState.presses + 1}
			keyState := stateKey(newState)
			if !visited[keyState] {
				visited[keyState] = true
				queue.Enqueue(newState)
			}
		}
	}

	// Если не удалось найти последовательность
	return -1
}

// stateKey генерирует уникальный ключ для состояния
func stateKey(state State) string {
	return fmt.Sprintf("%d,%d,%d", state.pos.x, state.pos.y, state.index)
}

// getKeyAt возвращает ключ по позиции
func getKeyAt(pos Position, keypad *Keypad) string {
	if key, exists := keypad.keys[pos]; exists {
		return key
	}
	return ""
}

// getNumericValue извлекает числовое значение из кода
func getNumericValue(code string) int {
	num := 0
	for _, char := range code {
		if char >= '0' && char <= '9' {
			num = num*10 + int(char-'0')
		}
	}
	return num
}
