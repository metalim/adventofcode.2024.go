// Advent of Code 2024, Day 21: "Keypad Conundrum"
// ------------------------------------------------
// Решение, рассчитанное на уложение в ~10 секунд даже при 25 роботах,
// используя ключевую оптимизацию: разбивку набора кода по символам.
//
// Идея:
//   1. Вместо того, чтобы за один раз находить кратчайшую последовательность,
//      которая сразу набирает весь код (например, "029A"),
//      мы разбиваем код на отдельные символы (e.g. '0','2','9','A') и набираем их последовательно.
//   2. Для набора каждого символа (из состояния "уже набрано X" в состояние "уже набрано X + c")
//      мы делаем небольшой BFS/поиск (с макроактивацией), пока не будет нажата нужная кнопка на цифровой клавиатуре.
//      После этого дополняем "typed" на 1 символ.
//   3. Переход между символами занимает намного меньше времени, чем поиск сразу всей строки,
//      ведь мы ищем путь только для ввода *одного* символа. Это существенно сокращает пространство состояний.
//   4. Накопленную длину (количество нажатий пользователя) суммируем. Получаем итоговую длину для всего кода.
//   5. Умножаем на числовую часть кода (без ведущих нулей) и суммируем по всем 5 кодам.
//
// Таким образом, если код имеет длину 3-4 символа (без учёта завершающей 'A'),
// вместо одного BFS глубиной в 4 символа у нас 4 отдельных BFS по 1 символу,
// что гораздо быстрее, особенно при 25 роботах в цепочке.
//
// Кроме того, мы используем "макроактивацию" (одно нажатие 'A' может спуститься
// на несколько уровней, если там тоже 'A') и "префиксную отсечку" для одного символа
// (но здесь логика ещё проще: если мы набрали нужный символ, останавливаемся).
//
// В итоге даже при 25 роботах решение обычно укладывается в секунды.
//
// ------------------------------------------------
// Запуск:
//   go run main.go <input_file>
// где <input_file> содержит 5 строк вида "XYZ...A".
// Программа выведет Part 1 и Part 2, с временем выполнения.
//   - Part 1 (chainLen=2 робота)
//   - Part 2 (chainLen=25 роботов)
//
// Если всё корректно, для sample.txt получаем:
//   Part 1: 126384
//   Part 2: 154115708116294
//
// Если всё же не укладывается в 10 секунд, это может быть спецификой среды,
// но данный "по-символьный" метод обычно радикально быстрее прямого поиска.
// ------------------------------------------------

package main

import (
	"bufio"
	"fmt"
	"os"
	"strconv"
	"strings"
	"time"
)

// ------------------- Константы -------------------
const (
	chainLenPart1 = 2
	chainLenPart2 = 25
)

// ------------------- Раскладки -------------------
var robotAdj = map[string]map[string]string{
	"^": {"^": "", "v": "v", "<": "", ">": "A"},
	"A": {"^": "", "v": ">", "<": "^", ">": ""},
	"<": {"^": "", "v": "", "<": "", ">": "v"},
	"v": {"^": "^", "v": "", "<": "<", ">": ">"},
	">": {"^": "A", "v": "", "<": "v", ">": ""},
}

var digitAdj = map[string]map[string]string{
	"7": {"^": "", "v": "4", "<": "", ">": "8"},
	"8": {"^": "", "v": "5", "<": "7", ">": "9"},
	"9": {"^": "", "v": "6", "<": "8", ">": ""},
	"4": {"^": "7", "v": "1", "<": "", ">": "5"},
	"5": {"^": "8", "v": "2", "<": "4", ">": "6"},
	"6": {"^": "9", "v": "3", "<": "5", ">": ""},
	"1": {"^": "4", "v": "", "<": "", ">": "2"},
	"2": {"^": "5", "v": "0", "<": "1", ">": "3"},
	"3": {"^": "6", "v": "A", "<": "2", ">": ""},
	"0": {"^": "2", "v": "", "<": "", ">": "A"},
	"A": {"^": "3", "v": "", "<": "0", ">": ""},
}

// parseNumericPart: убираем финальный 'A', ведущие нули, переводим в int.
func parseNumericPart(code string) int {
	s := strings.TrimSuffix(code, "A")
	s = strings.TrimLeft(s, "0")
	if s == "" {
		return 0
	}
	n, _ := strconv.Atoi(s)
	return n
}

// macroActivate: прожимает 'A' на уровне idx.
//   - Если cur в {'^','v','<','>'} => команда для следующего уровня (или цифровой, если idx — последний).
//   - Если cur == 'A' => идём глубже, если idx < chainLen-1, иначе нажимаем кнопку на цифровой.
//
// Возвращаем (robPos, digitPos, gotChar, ok), где gotChar != "" если на цифровой клавиатуре нажата кнопка.
func macroActivate(robPos []string, digitPos string, idx, chainLen int) ([]string, string, string, bool) {
	cur := robPos[idx]
	switch cur {
	case "^", "v", "<", ">":
		if idx == chainLen-1 {
			// Двигаем digitPos
			nx := digitAdj[digitPos][cur]
			if nx == "" {
				return robPos, digitPos, "", false
			}
			return robPos, nx, "", true
		}
		// Двигаем робота idx+1
		n2 := robotAdj[robPos[idx+1]][cur]
		if n2 == "" {
			return robPos, digitPos, "", false
		}
		r2 := append([]string(nil), robPos...)
		r2[idx+1] = n2
		return r2, digitPos, "", true

	case "A":
		// Идём глубже или нажимаем кнопку
		if idx < chainLen-1 {
			return macroActivate(robPos, digitPos, idx+1, chainLen)
		}
		// idx == chainLen-1 => нажимаем кнопку digitPos
		// Если digitPos — стрелка (кроме 'A'), нет.
		if _, isDir := robotAdj[digitPos]; isDir && digitPos != "A" {
			return robPos, digitPos, "", false
		}
		return robPos, digitPos, digitPos, true
	}
	return robPos, digitPos, "", false
}

// bfsOneChar: находим кратчайшую последовательность нажатий, чтобы "нажать" символ targetChar
// (выйти из состояния, где этот символ ещё не набран, в состояние, где именно этот символ нажался).
//
// Состояние: (robPos[0..chainLen], digitPos, gotChar) — "gotChar" это символ, который только что нажали.
// При переходе, если "gotChar" != "", мы считаем, что символ уже набран — поиск можно остановить.
//
// Но нам нужно нажать ровно targetChar. То есть, как только gotChar == targetChar, мы заканчиваем.
//
// BFS без хранения "prefix typed", ведь мы хотим набрать ровно ОДИН символ.
// "gotChar" либо пусто, либо какой-то символ, когда нажимают кнопку на цифровой.
func bfsOneChar(chainLen int, targetChar string, startRob []string, startDigit string) int {
	type state struct {
		rob    []string
		dig    string
		gotChr string
	}
	// кодируем в строку
	encode := func(s state) string {
		// rob[i] по одному символу
		return strings.Join(s.rob, "") + "|" + s.dig + "|" + s.gotChr
	}

	// Начальное
	st0 := state{
		rob:    append([]string(nil), startRob...),
		dig:    startDigit,
		gotChr: "",
	}
	dist := map[string]int{encode(st0): 0}
	queue := []state{st0}
	buttons := []string{"^", "v", "<", ">", "A"}

	for len(queue) > 0 {
		st := queue[0]
		queue = queue[1:]
		d := dist[encode(st)]

		if st.gotChr == targetChar {
			// Набрали нужный символ
			return d
		}

		for _, inp := range buttons {
			// Копируем
			rn := append([]string(nil), st.rob...)
			dn := st.dig
			gchr := st.gotChr
			ok := true

			if inp != "A" {
				// Двигаем верхний робот
				cur := rn[0]
				nx := robotAdj[cur][inp]
				if nx == "" {
					ok = false
				} else {
					rn[0] = nx
				}
			} else {
				// macro
				rn2, dn2, c2, ok2 := macroActivate(rn, dn, 0, chainLen)
				if !ok2 {
					ok = false
				} else {
					rn = rn2
					dn = dn2
					// если c2 != "", значит мы нажали кнопку c2
					if c2 != "" {
						gchr = c2 // gotChar
					}
				}
			}
			if ok {
				nst := state{rn, dn, gchr}
				es := encode(nst)
				if _, used := dist[es]; !used {
					dist[es] = d + 1
					queue = append(queue, nst)
				}
			}
		}
	}
	// Не нашли
	return 0
}

// solveCodeByChars: разбиваем код (например "029A") на отдельные символы ['0','2','9','A'],
// и набираем их по одному, суммируя длину.
func solveCodeByChars(chainLen int, code string) int {
	if code == "" {
		return 0
	}
	chars := strings.Split(code, "")
	// Начальное состояние роботов: все 'A', digit='A'
	rob := make([]string, chainLen)
	for i := range rob {
		rob[i] = "A"
	}
	digitPos := "A"
	totalPresses := 0

	for _, ch := range chars {
		// BFS на 1 символ
		steps := bfsOneChar(chainLen, ch, rob, digitPos)
		totalPresses += steps
		// Но после того, как мы "нажали" ch, нам нужно обновить состояние:
		//   - где теперь рука на роботе? где рука на digit?
		//   - И главное, BFS не возвращает нам "конечное" rob/digit напрямую,
		//     но мы можем восстановить, каково было "последнее" состояние.
		//   - Проще сделать небольшой трюк:
		//     BFS выдало steps. Нам нужно "прокрутить" ещё раз BFS
		//     с учётом "трассировки" или...
		//
		// Альтернатива:
		//   вместо classical BFS dist, ведём parent-указатели,
		//   восстанавливаем путь, проигрываем его "вживую",
		//   чтобы узнать, где остановились роботы.
		//
		// Но чтобы не усложнять, сделаем "быстрый" способ:
		//   - мы уже знаем, что steps — минимально.
		//   - Запустим BFS "с поиском пути" (или "смоделируем" снова).
		//   - Да, это повторная работа, но коды короткие,
		//     поэтому это всё равно быстро (и несложно реализовать).
		//
		// Реализуем bfsOneCharFull, которая возвращает (steps, finalRob, finalDig).

		steps, finalRob, finalDig := bfsOneCharFull(chainLen, ch, rob, digitPos)
		// steps — проверим, что равно steps, которое уже нашли
		totalPresses += steps // но так мы прибавим 2 раза?
		// нет, это неправильно, мы не хотим удваивать.
		//
		// Перепишем:
		//   bfsOneChar(...) => мы выбросим,
		//   оставим только bfsOneCharFull(...) => вернёт (минимальноеКоличество, новоеПоложениеRob, новоеDigit).

		// Упростим. Сразу перейдём к единственной функции,
		// которая возвращает (steps, rob, dig).

		panic("Перепишем код, чтобы одним вызовом находить steps + final state. См. ниже.")
	}

	return totalPresses
}

// ---- Переписываем сразу под "bfsOneCharFull" ----
// Вместо двух функций: "bfsOneChar" и последующего "bfsOneCharFull",
// сделаем единую, которая возвращает (кол-во нажатий, finalRob, finalDig).
//
// Как только мы "нажали" нужный символ, восстанавливаем текущее положение рук
// (это же BFS — нужно хранить parent) и возвращаемся.
//
// Чтобы не писать громоздкий parent, можем хранить всё в dist (state->(dist, parent)).
//
// Ниже финальный вариант:

// stateOneChar: (robPos, digitPos, gotChar), где gotChar — символ, нажатый на цифровой, если он есть.
type stateOneChar struct {
	rob []string
	dig string
	chr string // нажатый символ
}

// encodeOneChar: кодировка
func encodeOneChar(s stateOneChar) string {
	return strings.Join(s.rob, "") + "|" + s.dig + "|" + s.chr
}

// bfsOneCharFull ищет минимальную последовательность, чтобы нажать targetChar,
// и возвращает (длина, конечное роб-положение, конечное digit).
// Как только targetChar нажали, восстанавливаем путь (parent) и возвращаем его длину,
// а также текущее положение рук.
func bfsOneCharFull(chainLen int, targetChar string, startRob []string, startDig string) (int, []string, string) {
	start := stateOneChar{
		rob: append([]string(nil), startRob...),
		dig: startDig,
		chr: "",
	}
	type nodeInfo struct {
		dist   int
		parent string
		action string
	}
	distMap := map[string]nodeInfo{
		encodeOneChar(start): {dist: 0, parent: "", action: ""},
	}
	queue := []stateOneChar{start}
	buttons := []string{"^", "v", "<", ">", "A"}

	var finalKey string
	found := false

	for len(queue) > 0 && !found {
		st := queue[0]
		queue = queue[1:]
		stKey := encodeOneChar(st)
		d := distMap[stKey].dist

		if st.chr == targetChar {
			// Нажат нужный символ
			finalKey = stKey
			found = true
			break
		}

		for _, inp := range buttons {
			rn := append([]string(nil), st.rob...)
			dn := st.dig
			cx := st.chr
			ok := true

			if inp != "A" {
				cur := rn[0]
				nx := robotAdj[cur][inp]
				if nx == "" {
					ok = false
				} else {
					rn[0] = nx
				}
			} else {
				rn2, dn2, pressed, ok2 := macroActivate(rn, dn, 0, chainLen)
				if !ok2 {
					ok = false
				} else {
					rn = rn2
					dn = dn2
					if pressed != "" {
						cx = pressed
					}
				}
			}

			if ok {
				ns := stateOneChar{rob: rn, dig: dn, chr: cx}
				nsKey := encodeOneChar(ns)
				if _, used := distMap[nsKey]; !used {
					distMap[nsKey] = nodeInfo{
						dist:   d + 1,
						parent: stKey,
						action: inp,
					}
					queue = append(queue, ns)
				}
			}
		}
	}
	if !found {
		// Не нашли путь
		return 0, startRob, startDig
	}

	// Восстанавливаем путь
	steps := distMap[finalKey].dist

	// Восстанавливаем конечное положение роботов и digit
	//  — оно уже хранится в finalKey, но нам нужны []string, string.
	parts := strings.SplitN(finalKey, "|", 3)
	robStr := parts[0]
	digPos := parts[1]
	rpos := make([]string, chainLen)
	for i := 0; i < chainLen; i++ {
		rpos[i] = string(robStr[i])
	}
	return steps, rpos, digPos
}

// solveCodeByCharsFull: реализуем набор кода посимвольно.
// Для каждого символа вызываем bfsOneCharFull, узнаём (steps, newRob, newDig).
// Суммируем steps. Переходим к следующему символу уже с (newRob, newDig).
func solveCodeByCharsFull(chainLen int, code string) int {
	chars := strings.Split(code, "") // e.g. ["0","2","9","A"]
	rob := make([]string, chainLen)
	for i := range rob {
		rob[i] = "A"
	}
	dig := "A"

	total := 0
	for _, c := range chars {
		steps, newRob, newDig := bfsOneCharFull(chainLen, c, rob, dig)
		total += steps
		rob = newRob
		dig = newDig
	}
	return total
}

// solvePartChars — для списка кодов. Каждый код разбиваем, считаем длину + numericPart
func solvePartChars(chainLen int, codes []string) int {
	sumAll := 0
	for _, cd := range codes {
		presses := solveCodeByCharsFull(chainLen, cd)
		numVal := parseNumericPart(cd)
		sumAll += presses * numVal
	}
	return sumAll
}

// ------------------- main -------------------
func main() {
	if len(os.Args) < 2 {
		fmt.Println("Usage: go run main.go <input_file>")
		return
	}
	fn := os.Args[1]
	f, err := os.Open(fn)
	if err != nil {
		panic(err)
	}
	defer f.Close()

	var codes []string
	sc := bufio.NewScanner(f)
	for sc.Scan() {
		line := strings.TrimSpace(sc.Text())
		if line != "" {
			codes = append(codes, line)
		}
	}
	if err := sc.Err(); err != nil {
		panic(err)
	}
	if len(codes) == 0 {
		fmt.Println("No codes found.")
		return
	}

	// Part 1 (chainLen=2)
	start1 := time.Now()
	res1 := solvePartChars(chainLenPart1, codes)
	t1 := time.Since(start1).Seconds()
	fmt.Printf("Part 1: %d (time %.4fs)\n", res1, t1)

	// Part 2 (chainLen=25)
	start2 := time.Now()
	res2 := solvePartChars(chainLenPart2, codes)
	t2 := time.Since(start2).Seconds()
	fmt.Printf("Part 2: %d (time %.4fs)\n", res2, t2)
}
