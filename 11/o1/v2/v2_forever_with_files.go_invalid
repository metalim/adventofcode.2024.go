/*
–ø—Ä–µ—Ä–≤–∞–ª —á–µ—Ä–µ–∑ 8 –º–∏–Ω—É—Ç, —Ç.–∫. –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–Ω—è–ª–∞ –≤—Å—é –ø–∞–º—è—Ç—å 32 –ì–ë –∏ —É—à–ª–∞ –≤ —Å–≤–æ–ø –µ—â—ë –Ω–∞ —Å—Ç–æ–ª—å–∫–æ –∂–µ.

```
‚ûú go run ./o1/ sample2.txt
55312
26.527292ms
^Csignal: interrupt

2024.go/11 on ÓÇ† main [?] via üêπ v1.23.3 took 8m 12s
‚ûú
```
*/

package main

import (
	"bufio"
	"fmt"
	"log"
	"os"
	"strings"
	"time"
)

func main() {
	if len(os.Args) < 2 {
		log.Fatal("Usage: go run main.go <inputfile>")
	}

	inputFile := os.Args[1]

	// –≠–≤–æ–ª—é—Ü–∏—è –¥–æ 25
	start := time.Now()
	tmpFile := evolveFile(inputFile, 25)
	count25 := countLines(tmpFile)
	fmt.Println(count25)
	fmt.Println(time.Since(start))

	// –≠–≤–æ–ª—é—Ü–∏—è –¥–æ 75 (–µ—â—ë 50 —à–∞–≥–æ–≤)
	start2 := time.Now()
	tmpFile = evolveFile(tmpFile, 50)
	count75 := countLines(tmpFile)
	fmt.Println(count75)
	fmt.Println(time.Since(start2))
}

// evolveFile –ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ times —Ä–∞–∑, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
func evolveFile(inputFile string, times int) string {
	in := inputFile
	for i := 0; i < times; i++ {
		out := in + ".out"
		processFile(in, out)
		os.Remove(in)
		os.Rename(out, in)
	}
	return in
}

// processFile —á–∏—Ç–∞–µ—Ç stones –∏–∑ —Ñ–∞–π–ª–∞ inFile, –ø—Ä–∏–º–µ–Ω—è–µ—Ç –æ–¥–∏–Ω —à–∞–≥ —ç–≤–æ–ª—é—Ü–∏–∏ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ outFile
func processFile(inFile, outFile string) {
	fi, err := os.Open(inFile)
	if err != nil {
		log.Fatal(err)
	}
	defer fi.Close()

	fo, err := os.Create(outFile)
	if err != nil {
		log.Fatal(err)
	}
	defer fo.Close()

	scanner := bufio.NewScanner(fi)
	writer := bufio.NewWriter(fo)
	for scanner.Scan() {
		num := scanner.Text()
		if num == "0" {
			// –ü—Ä–∞–≤–∏–ª–æ 1
			writer.WriteString("1\n")
		} else {
			// –ü—Ä–æ–≤–µ—Ä–∏–º –¥–ª–∏–Ω—É
			l := len(num)
			if l%2 == 0 {
				// –ü—Ä–∞–≤–∏–ª–æ 2
				half := l / 2
				left := strings.TrimLeft(num[:half], "0")
				if left == "" {
					left = "0"
				}
				right := strings.TrimLeft(num[half:], "0")
				if right == "" {
					right = "0"
				}
				writer.WriteString(left + "\n")
				writer.WriteString(right + "\n")
			} else {
				// –ü—Ä–∞–≤–∏–ª–æ 3
				res := multiply2024(num)
				writer.WriteString(res + "\n")
			}
		}
	}
	if err := scanner.Err(); err != nil {
		log.Fatal(err)
	}
	writer.Flush()
}

// multiply2024 —É–º–Ω–æ–∂–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ —á–∏—Å–ª–æ –Ω–∞ 2024
func multiply2024(num string) string {
	// 2024 = 2000 + 20 + 4
	// –£–º–Ω–æ–∂–∏–º –ø–æ-—Ä–∞–∑—Ä—è–¥—É
	n := reverse(num)
	var res [5]int               // –º–∞–∫—Å–∏–º—É–º 2024 * 9 ~ 18216, –Ω–æ –¥–ª–∏–Ω–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±—É–¥–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å—Å—è
	sum := make([]int, len(n)+4) // –∑–∞–ø–∞—Å –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞

	for i := 0; i < len(n); i++ {
		d := int(n[i] - '0')
		tmp := d * 2024
		sum[i] += tmp % 10
		sum[i+1] += (tmp / 10) % 10
		sum[i+2] += (tmp / 100) % 10
		sum[i+3] += (tmp / 1000) % 10
		sum[i+4] += (tmp / 10000) % 10
	}

	// –ü—Ä–æ–±–µ–∂–∏–º—Å—è –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
	for i := 0; i < len(sum); i++ {
		if sum[i] > 9 {
			carry := sum[i] / 10
			sum[i] = sum[i] % 10
			if i+1 < len(sum) {
				sum[i+1] += carry
			}
		}
	}

	// –£–¥–∞–ª–∏–º –≤–µ–¥—É—â–∏–µ –Ω—É–ª–∏
	for len(sum) > 1 && sum[len(sum)-1] == 0 {
		sum = sum[:len(sum)-1]
	}

	// –ü–µ—Ä–µ–≤–µ—Ä–Ω—ë–º –Ω–∞–∑–∞–¥
	for i := 0; i < len(sum)/2; i++ {
		sum[i], sum[len(sum)-1-i] = sum[len(sum)-1-i], sum[i]
	}

	sb := &strings.Builder{}
	for _, v := range sum {
		sb.WriteByte(byte('0' + v))
	}
	return sb.String()
}

func reverse(s string) string {
	r := make([]byte, len(s))
	for i := 0; i < len(s); i++ {
		r[len(s)-1-i] = s[i]
	}
	return string(r)
}

func countLines(filename string) int {
	f, err := os.Open(filename)
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()
	scanner := bufio.NewScanner(f)
	count := 0
	for scanner.Scan() {
		count++
	}
	return count
}
